#!/bin/sh
set -eu -o pipefail
exec 3>&1 1>&2

payload=$(mktemp $TMPDIR/packer-resource-request.XXXXXX)
vars_file=$(mktemp $TMPDIR/packer-resource-vars.XXXXXX)

cat > $payload <&0

SRC=$1

export AWS_ACCESS_KEY_ID=$(jq -r '.source.aws_access_key_id // empty' < $payload)
export AWS_SECRET_ACCESS_KEY=$(jq -r '.source.aws_secret_access_key // empty' < $payload)
export AWS_DEFAULT_REGION=$(jq -r '.source.region // empty' < $payload)

# remove any empty credentials vars so the AWS client will try instance profiles
# https://www.packer.io/docs/builders/amazon.html#using-an-iam-instance-profile
if [ -z "$AWS_ACCESS_KEY_ID" ]; then
  unset AWS_ACCESS_KEY_ID
fi

if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
  unset AWS_SECRET_ACCESS_KEY
fi

TEMPLATE=$(jq -r '.params.template // empty' $payload)
if [ -z "$TEMPLATE" ]; then
  echo "template not passed in params:" >&2
  jq '.params // {}' $payload >&2
  exit 1
elif [ ! -f "$SRC/$TEMPLATE" ]; then
  echo "template $SRC/$TEMPLATE does not exist" >&2
  exit 1
fi

ARGS=""
FILES=$(jq -r '.params.var_file // empty | if type =="array" then .[] else . end' $payload)

for FILE in $FILES; do
  if [ ! -f "$SRC/$FILE" ]; then
    echo "var_file $SRC/$FILE does not exist" >&2
    exit 1
  else
    ARGS="$ARGS -var-file=$SRC/$FILE"
  fi
done

jq '.params|del(.template,.var_file) // empty' $payload > $vars_file

cd $(dirname $SRC/$TEMPLATE)

packer validate $ARGS -var-file=$vars_file $SRC/$TEMPLATE

echo

packer build -machine-readable $ARGS -var-file=$vars_file $SRC/$TEMPLATE \
  | tee /tmp/output | awk -F, '/,ui,/ { print $5 }' | sed -u 's#%!(PACKER_COMMA)#,#g;s#\\n#\n#g'

# FIXME: include metadata such as AMI name, copied region: ami-id, etc.
# ... um, but generalise it for other kinds of packer builders, yeah?

AMI=$(awk -F: '/artifact,0,id/ { print $2 }' /tmp/output)

echo '{ "version": { "ami": "'$AMI'" } }' >&3
